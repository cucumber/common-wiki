Cucumber Rails support built-in, and I really recommend using "Webrat":http://github.com/brynary/webrat
in the step definitions. Here is how to get you started.

h2. Install Cucumber, Webrat and RSpec

You can use both Rubygems or Rails' plugin mechanism. We usually recommend Rubygems. You can read a longer discussion "here":http://www.ruby-forum.com/topic/167379.

h3. Using Rubygems

The easiest is to install everything as a gem.
<pre><code>[sudo] gem install rspec rspec-rails cucumber webrat
</code></pre>

If you use gems, you have to make sure everybody on the team has the same version of the gems installed.

h3. Using plugins

Another option is to install the libraries as Rails plugins. If you use Git for your Rails app, here is how to do that:

<pre><code>git submodule add git://github.com/aslakhellesoy/cucumber.git vendor/plugins/cucumber
git submodule add git://github.com/brynary/webrat.git vendor/plugins/webrat
git submodule add git://github.com/dchelimsky/rspec.git vendor/plugins/rspec
git submodule add git://github.com/dchelimsky/rspec-rails.git vendor/plugins/rspec-rails
</code></pre>

If your own Rails code is *not* in Git, just replace <code>submodule add</code> with <code>clone</code>.
If you're behind a proxy, try to replace <code>git://</code> with <code>http://</code> and set the <code>http_proxy</code> environment variable.

h3. Behind a firewall?

As a last resort, download tarballs from GitHub.

h2. Install Other dependencies

<pre><code>gem install term-ansicolor treetop diff-lcs hpricot</code></pre>

You can also use "Nokogiri":http://nokogiri.rubyforge.org instead of "Hpricot":http://code.whytheluckystiff.net/hpricot/

h2. Create Your Rails Project

Create the rails project with the following command:

<pre><code>rails YourProjectName</code></pre>

Don't forget to create the corresponding databases. 

Write all commands in the next steps from this project's path.

h2. Bootstrap Cucumber

You'll need a Rake task and a couple of files that configure Cucumber for use with Ruby on Rails and Webrat.
You create these with:

<pre><code>ruby script/generate cucumber</code></pre>

Take a look at the generated files. If you need to, you can tweak them later.

h2. Start a feature

It's really, really recommended that you write your features by hand - in collaboration with your
customer / business analyst / domain expert / interaction designer. However, to get you started (and so you can see how to use
Webrat), you can use the feature generator to generate the first few features:

<pre><code>ruby script/generate feature Frooble name color description</code></pre>

This will generate a simple plain text feature with associated steps. Don't get addicted to this
generator - you're better off writing these by hand in the long run.

h2. Run features

Require webrat if you are using it. Write the following line at he end of the file YourProject\features\support\env.rb

<pre><code>require 'webrat'</code></pre>

Now you can execute:

<pre><code>rake features</code></pre>

This should result in failing scenarios, because you haven't written any code yet (I hope). 

Now it's time to write some code, or generate some. Try this:
<pre><code>script/generate rspec_scaffold Frooble name:string color:string description:text
rake db:migrate
rake features
</code></pre>

See [[Running Features]] for more info.

h2. View spec redundancy

Since I recommend you verify outcomes (*Then* steps) by looking at the HTML, you might end up having some degree
of redundancy with view specs. I recommend you delete generated view specs if you run into too much maintenance
headaches and rely on the features instead of view specs. However, in some cases it can be handy to use both.