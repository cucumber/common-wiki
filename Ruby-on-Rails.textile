Cucumber supports Ruby on Rails out of the box. Currently the following Rails versions are known to be working:

* v2.3.2
* v2.2.2
* v2.2.1
* v2.2.0
* v2.1.2
* v2.1.1
* v2.1.0

Older versions will never be supported as it requires too much work.

We strongly recommend you use "Webrat":http://github.com/brynary/webrat in the [[Step Definitions]]. Here is how to get you started.

h2. Install Cucumber, Webrat and RSpec

*Ubuntu/Debian users:* Follow these "Nokogiri install instructions":http://hightechsorcery.com/2008/12/howto-install-nokogiri-gem-ubuntu first.

You can use both Rubygems or Rails' plugin mechanism. We usually recommend Rubygems. You can read a longer discussion "here":http://www.ruby-forum.com/topic/167379.

h3. Using Rubygems

The easiest is to install everything as a gem.
<pre><code>[sudo] gem install rspec rspec-rails cucumber webrat
</code></pre>

If you use gems, you have to make sure everybody on the team has the same version of the gems installed. Also note that you don't *have to* use rspec and rspec-rails and webrat, but we suggest you use them unless you have good reasons to use something else.

h3. Using plugins

Another option is to install the libraries as Rails plugins. If you use Git for your Rails app, here is how to do that:

<pre><code>git submodule add git://github.com/aslakhellesoy/cucumber.git vendor/plugins/cucumber
git submodule add git://github.com/brynary/webrat.git vendor/plugins/webrat
git submodule add git://github.com/dchelimsky/rspec.git vendor/plugins/rspec
git submodule add git://github.com/dchelimsky/rspec-rails.git vendor/plugins/rspec-rails
</code></pre>

If your own Rails code is *not* in Git, just replace <code>submodule add</code> with <code>clone</code>.
If you're behind a proxy, try to replace <code>git://</code> with <code>http://</code> and set the <code>http_proxy</code> environment variable.

h4. Install dependencies

The plugins' dependencies must be installed separately:

<pre><code>gem install term-ansicolor treetop diff-lcs nokogiri builder</code></pre>

h3. Behind a firewall?

As a last resort, download "tarballs from GitHub":http://github.com/aslakhellesoy/cucumber/downloads.

h2. Create Your Rails Project

Create the rails project with the following command:

<pre><code>rails YourProjectName</code></pre>

Don't forget to create the corresponding databases. 

Write all commands in the next steps from this project's path.

h2. Bootstrap Cucumber

You'll need a Rake task and a couple of files that configure Cucumber for use with Ruby on Rails and Webrat.
You create these with:

<pre><code>ruby script/generate cucumber</code></pre>

Take a look at the generated files. If you need to, you can tweak them later.

h2. Start a feature

It's really, really recommended that you write your features by hand - in collaboration with your
customer / business analyst / domain expert / interaction designer. However, to get you started (and so you can see how to use
Webrat), you can use the feature generator to generate the first few features:

<pre><code>ruby script/generate feature Frooble name:string color:string description:text
</code></pre>

This will generate a simple plain text feature with associated steps. Don't get addicted to this
generator - you're better off writing these by hand in the long run.

*Important*: The generated feature will fail unless you have set up a layout in your app. This is because Webrat fails to parse HTML
that isn't well formed (i.e. has a single <code><html></code> root node). "Here is a simple layout":http://github.com/aslakhellesoy/cucumber_rails/raw/master/app/views/layouts/application.html.erb you can use, but I hope you have a better one yourself.

h2. Run features

Just run:

<pre><code>rake features</code></pre>

This should result in failing scenarios, because you haven't written any code yet (I hope). 

Now it's time to write some code, or generate some. Try this:
<pre><code>script/generate rspec_scaffold Frooble name:string color:string description:text
rake db:migrate
rake features
</code></pre>

h3. Other ways of running features

You can also run specific features directly with cucumber:

<pre><code>cucumber --require features --require lib features/subdir/
cucumber --require features --require lib features/some-nifty.feature</code></pre>

And using autospec with a similar setting (<code>--require features --require lib</code>), applied in your project's /cucumber.yml:

<pre><code>autotest-all: --require features --require lib --format progress features
autotest: --require features --require lib features  
default: --format pretty
html: --format html --out features.html</code></pre>

Remember that you need AUTOFEATURE=true for autospec to include cucumber features.  See [[Running Features]] and [[Autotest Integration]] for more info.

h2. View spec redundancy

Since I recommend you verify outcomes (*Then* steps) by looking at the HTML, you might end up having some degree of redundancy with view specs. I recommend you delete generated view specs if you run into too much maintenance headaches and rely on the features instead of view specs. However, in some cases it can be handy to use both.

h2. Authentication

Some guidance for authentication is provided below. It is recommended that a new user is created, rather than loaded through fixtures or etc.

In the .feature, use a phrase similar to <code>Given a user is logged in as "markEmark"</code>, and add the following to your relevent step definitions.

<pre><code>Given /^a user is logged in as "(.*)"$/ do |login|
  @current_user = User.create!(
    :login => login,
    :password => 'generic',
    :password_confirmation => 'generic',
    :email => "#{login}@example.com"
  )

  # :create syntax for restful_authentication w/ aasm. Tweak as needed.
  # @current_user.activate! 

  visit "/login" 
  fill_in("login", :with => login) 
  fill_in("password", :with => 'generic') 
  click_button("Log in")
  response.body.should =~ /Logged/m  
end
</code></pre>

h2. Upgrading to Cucumber 0.2 from Earlier Versions

From the release notes:

<pre><code>
IMPORTANT NOTE FOR RAILS USERS.
The template used to generate your features/support/env.rb has changed. You have to apply a minor change
manually for existing Rails projects when you upgrade to this version. Change this:

  require 'webrat/rspec-rails'

to this:

  require 'webrat/core/matchers'
</code></pre>