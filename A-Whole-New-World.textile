Cucumber runs scenarios in a World. By default, the World is just an instance of Object. If you want to add any behaviour to the world, perhaps some helper methods, or logging, or whatever. You can do this in support/env.rb:

<pre>
class CustomWorld
  def a_helper
    ...
  end
end

World do
  CustomWorld.new
end
</pre>

Now you can call a_helper from any step you want. Note that every scenario gets run in a separate instance of the world, so there is no implicit state-sharing from scenario to scenario.

Once you have defined a World class you can extend it with other modules to add additional helper methods. In *version 0.2.3.2 and later* after you specify the class with a proc you can then simply pass in a module to the World method to extend it.  For example:

<pre>
World do 
 CustomWorld.new
end

module FirstModuleHelpers
  def helper_a
    ...
  end
end

module SecondModuleHelpers
  def helper_b
    ...
  end
end

World(FirstModuleHelpers)
World(SecondModuleHelpers)

</pre>

In *versions prior to 0.2.3.2* you can define several World blocks to do this. They will be called in a chain, yielding the result of the previous to the next:

<pre>
module FirstModuleHelpers
  def helper_a
    ...
  end
end

module SecondModuleHelpers
  def helper_b
    ...
  end
end

World do |world|
  world.extend(FirstModuleHelpers)
  world
end

World do |world|
  world.extend(SecondModuleHelpers)
  world
end
</pre>

For example, if you use [[Ruby on Rails]], you will get an instance of <code>Cucumber::Rails::World</code>, which gives you access to a lot of Rails' helper methods for routes etc.