Step definitions are defined in ruby files under <code>features/step_definitions/*_steps.rb</code>. Here is a simple example:

<pre>
Given /^I have (\d+) cucumbers in my belly$/ do |cukes|
   # Some Ruby code here
end
</pre>

A step definition is analogous to a _method definition /  function definition_ in any kind of OO/procedural programming language. Step definitions can take 0 or more arguments, identified by groups in the Regexp (and an equal number of arguments to the Proc). 

Then there are Steps. Steps are declared in your <code>features/*.feature</code> files. Here is an example:

<pre>
Given I have 93 cucumbers in my belly
</pre>

A step is analogous to a method or function _invocation_. In this example, you're "calling" the step definition above with one argument - the string "93". Cucumber matches the Step against the Step Definition's Regexp and takes all of the captures from that match and passes them to the Proc.

Step Definitions start with an "adjective":http://www.merriam-webster.com/dictionary/given or an "adverb":http://www.merriam-webster.com/dictionary/when. All Step definitions are loaded (and defined) before Cucumber starts to execute the plain text.

When Cucumber executes the plain text, it will for each step look for a registered Step Definition with a matching Regexp. If it finds one it will execute its Proc, passing all groups from the Regexp match as arguments to the Proc.

The adjective/adverb has *no* significance when Cucumber is registering or looking for Step Definitions.

Also check out [[Using tabular data in features]] for more info on how to pass entire tables to your step definitions.

h2. Undefined steps

When Cucumber can't find a matching Step Definition the step gets marked as yellow, and all subsequent steps in the scenario are skipped. If you use <code>--strict</code> this will cause Cucumber to exit with <code>1</code>

h2. Pending steps

When a Step Definition's Proc invokes the <code>#pending</code> method, the step is marked as yellow. Pending never causes errors - even with <code>--strict</code>, it just reminds you that you have work to do.

h2. Failed steps

When a Step Definition's Proc is executed and raises an error, the step is marked as red.

h2. Skipped steps

Steps that follow pending or failed steps are never executed (even if there is a matching Step Definition), and are marked cyan.

h2. Ambiguous steps

Consider these step definitions:

<pre><code>Given /Three (.*) mice/ do |disability|
end

Given /Three blind (.*)/ do |animal|
end
</code></pre>

And a plain text step:

<pre><code>Given Three blind mice</code></pre>

Cucumber can't make a decision about what Step Definition to execute, and wil raise an error telling you to fix the ambiguity.

h2. Duplicate Step Definitions

In Cucumber you're not allowed to use a regexp more than once in a Step Definition (even across files, even with different code inside the Proc), so the following would cause an error:

<pre><code>Given /Three (.*) mice/ do |disability|
  # some code
end

Given /Three (.*) mice/ do |disability|
  # some other code
end
</code></pre>
