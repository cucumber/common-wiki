h2. Webrat

You can use Cucumber with "Sinatra":http://github.com/bmizerany/sinatra and "Webrat":http://www.brynary.com/uploads/webrat/rdoc/index.html!

Just make sure you have a <code>features/support/env.rb</code> file with the following:

<pre><code># Sinatra
app_file = File.join(File.dirname(__FILE__), *%w[.. .. app.rb])
require app_file
# Force the application name because polyglot breaks the auto-detection logic.
Sinatra::Application.app_file = app_file

# RSpec matchers
require 'spec/expectations'

# Webrat
require 'webrat'
Webrat.configure do |config|
  config.mode = :sinatra
end

World do
  session = Webrat::SinatraSession.new
  session.extend(Webrat::Matchers)
  session.extend(Webrat::HaveTagMatcher)
  session
end
</code></pre>

h2. Sinatra/Test

You can also use Cucumber with "Sinatra":http://github.com/bmizerany/sinatra using Sinatra's built-in "testing setup":http://www.sinatrarb.com/testing.html and "Test Harness":http://www.sinatrarb.com/testing.html#using_.  Make sure you have something like the the following, "tailored":http://www.sinatrarb.com/testing.html#frameworks to Test::Unit, RSpec, Bacon or Test::Spec, in your <code>features/support/env.rb</code>.

<pre><code>
require File.dirname(__FILE__) + "/../../your_sinatra_app"

# RSpec matchers
require 'spec/expectations'

# Required for RSpec to play nice with Sinatra/Test
require 'spec/interop/test'

# Sinatra/Test
require 'sinatra/test'

Test::Unit::TestCase.send :include, Sinatra::Test

World do
  Sinatra::TestHarness.new(Sinatra::Application)
end
</code></pre>

h2. Rack-Test

You can also use Cucumber with "Sinatra":http://github.com/bmizerany/sinatra using Bryan Helkamp's "rack-test":http://www.github.com/brynary/rack-test and "Webrat":http://www.github.com/brynary/webrat.  You can check out the rspec examples in the "hancock application":http://github.com/atmos/hancock.  Something like the following should be setup in your  <code>features/support/env.rb</code>.
<pre><code>
require File.expand_path(File.dirname(__FILE__)+'/../../spec_helper')
require 'haml'

MyApp::App.set :environment, :development

World do
  def app
    @app = Rack::Builder.new do
      run MyApp::App
    end
  end
  include Rack::Test::Methods
  include Webrat::Methods
  include Webrat::Matchers
end
</code></pre>
