h2. Pre-requisites

Selenium-RC requires the Java Runtime Environment (JRE) version 1.5.0 or higher

h2. Step 1: Install the Selenium gem

<pre><code>sudo gem install Selenium</code></pre>

h2. Step 2: Install Selenium-remote

Unfortunately the jar that the Selenium gem (version 1.1.14) comes with does not work with Firefox 3. So we have to get the latest jar from the Selenium-RC site: 

Download the Selenium RC Beta 2:

"http://seleniumhq.org/download/":http://seleniumhq.org/download/

Once you have extracted the download we copy: 

selenium-remote-control-1.0-beta-2/selenium-server-1.0-beta-2/selenium-server.jar

Over the jar that was installed with the Selenium gem:

GEM_INSTALL_DIR/Selenium-1.1.14/lib/selenium/openqa/selenium-server.jar.txt

h3. Alternate Solution

You can also patch the binary manually if the above solution does not work for you.

"http://www.spacevatican.org/2008/9/27/selenium-and-firefox-3":http://www.spacevatican.org/2008/9/27/selenium-and-firefox-3

A pre-patched binary can be found linked in the comments.

h2. Step 3: Ubuntu fix (skip if you're not using Ubuntu)

There is a bug with Selenium and Firefox 3 where Selenium cannot find: firefox-bin

To solve this we create a sym link:
<pre><code>sudo ln -s /usr/lib/firefox-3.0.4/firefox /usr/bin/firefox-bin</pre></code>

h2. Step 4: Starting Selenium

The Selenium gem installs a script which allows us to get Selenium-RC running
<pre><code>selenium</pre></code>
OR 
you can run the jar directly
<pre><code>java -jar selenium-server.jar.txt</pre></code>

h2. Step 5: Run the cucumber example

Run the Cucumber "Selenium example":http://github.com/aslakhellesoy/cucumber/tree/HEAD/examples/selenium

<pre><code>cucumber examples/selenium/features/</pre></code>

h2. Useful links

"Official Selenium-RC site":"http://selenium-rc.seleniumhq.org/

"Selenium gem at rubyforge":http://selenium.rubyforge.org/

h2. Cucumber / Selenium / Webrat

Many apps have features that don't require javascript to work, and running them all in selenium makes things slow.  Since webrat steps support selenium out of the box, you can reuse almost all of your standard step definitions for selenium as well.  Here's a recipe for how you can:

* Run your non-selenium features with transactional fixtures and standard webrat steps
* Run your entire suite (html and javascript) features with selenium, without transactional fixtures
* Reuse all (or almost all) or your step definitions between selenium and non-selenium runners

*NOTE* - when using this setup, you do _not_ need to start selenium manually.  Webrat will spawn a new selenium process and a mongrel process for you.

First, setup a directory structure like the following:

<pre><code>features/
|-- enhanced
|   `-- ajaxy.feature
|-- plain
|   `-- non_ajaxy.feature
|-- step_definitions
|   `-- webrat_steps.rb
`-- support
    |-- enhanced.rb
    |-- env.rb
    `-- plain.rb
</pre></code>

Create a cucumber.yml file with 2 profiles:

<pre><code>default: -r features/support/env.rb -r features/support/plain.rb -r features/step_definitions features/plain
selenium: -r features/support/env.rb -r features/support/enhanced.rb -r features/step_definitions features/enhanced features/plain
</pre></code>

In env.rb, turn on all webrat features:

<pre><code>ENV["RAILS_ENV"] = "test"
require File.expand_path(File.dirname(__FILE__) + '/../../config/environment')
require 'cucumber/rails/world'
require 'cucumber/formatters/unicode'
require 'webrat/rails'
require 'cucumber/rails/rspec'
</code></pre>

In enhanced.rb, set up the selenium-specific files:

<pre><code>Webrat.configure do |config|
  config.mode = :selenium
end


Before do
  # truncate your tables here, since you can't use transactional fixtures
end
</code></pre>

In plain.rb, set up the standard webrat features:

<pre><code># truncate your tables here if you are using the same database as selenium, since selenium doesn't use transactional fixtures
Cucumber::Rails.use_transactional_fixtures
</code></pre>

To run your regular features, you can execute:

<pre><code>cucumber</code></pre>

To run your selenium features, you can execute:

<pre><code>cucumber -p selenium</code></pre>
