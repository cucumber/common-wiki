*{color:red}The API for Cucumber's formatters changed significantly when Cucumber 0.4 was released. See "here":https://rspec.lighthouseapp.com/projects/16211-cucumber/tickets/438-deprecate-cucumberastvisitor-and-make-formatters-simple-listeners for more details.*

As Cucumber runs your features, it calls out to any number of listener objects to let them know how it's progressing. These listeners are notified at various points throughout the run of features. You can visualise this by using the 'debug' formatter. For example, look at the listener methods called for this simple feature in Cucumber's own test suite:

<pre>
$head -7 examples/self_test/features/sample.feature
# Feature comment
@one
Feature: Sample

    @two @three
  Scenario: Missing
    Given missing
$cucumber --format debug examples/self_test/sample.feature:6
before_features
  before_feature
    before_comment
      comment_line
    after_comment
    before_tags
      tag_name
    after_tags
    feature_name
    before_feature_element
      before_tags
        tag_name
        tag_name
      after_tags
      scenario_name
      before_steps
        before_step
          before_step_result
            step_name
          after_step_result
        after_step
      after_steps
    after_feature_element
  after_feature
after_features
</pre> 

If you want to write your own custom formatter, just create a class that implements any of the methods you see in the output from the debug formatter. Let's have an example.

Maybe you want to create a formatter that posts a message to Twitter every time a step fails? (I'm sure that would get you a lot of followers).

Here is how you'd do that:

Save your custom formatter class in <code>features/support</code> (or if you want to put it elsewhere, put a file in that directory that <code>require</code>s your formatter class).

<pre>
# features/support/twitter_formatter.rb
require 'rubygems'
require 'twitter'

module Silly
  class TwitterFormatter
    def initialize(step_mother, io, options)
      # We don't care about these - we're just twittering!
    end

    def step_name(keyword, step_match, status, source_indent, background)
      if status == :failed
        step_name = step_match.format_args(lambda{|param| "*#{param}*"})
        message = "#{step_name} FAILED"
        Twitter::Base.new('your email', 'your password').post(message)
      end
    end
  end
end
</pre>

Now you can run your features by passing <code>--format Silly::TwitterFormatter</code> to the <code>cucumber</code> command line, Rake task or even in <code>cucumber.yml</code> - see [[Running Features]] for all the options. You have more methods available than the ones used in this awesome example (but you only need to implement the ones you care about). Look at the sources for some of Cucumber's built-in formatters to discover more methods.

h2. If your formatter can't be found

If cucumber complains that it can't find your formatter, add an explicit <code>--require dir</code>, where <code>dir</code> is a parent directory of your formatter. You can also pass the full path to the ruby file where the formatter is defined.

The cucumber <code>--help</code> states:

bq.. Automatic loading is disabled when this option is specified, and all loading becomes explicit. Files under directories named "support" are always loaded first.

p. This means that you have to add your <code>support</code> folder to <code>--require dir</code> for it to be loaded.

h2. Other Formatters

# "TeamCityFormatter:":http://github.com/mattwynne/cucumber_teamcity/ prints cucumber results in a format for interpretation by a "TeamCity":http://www.jetbrains.com/teamcity/index.html  build agent
# "TextmateFormatter:":http://github.com/raldred/cucumber_textmate/ prints cucumber results as HTML with enhanced styling and Javascript for Textmate (Included in the cucumber core since 0.4.5)
# "cucumber-json":http://github.com/jnewland/cucumber-json - A cucumber output formatter that outputs JSON 
# "SlowHandCuke":http://github.com/moredip/SlowHandCuke - Simple tweak to the Pretty formatter to display the currently running step as it is running
# "Timestamped":http://github.com/moredip/Timestamped - Append test run timestamps to each scenario name as it is being output.
# "Fuubar":http://github.com/martinciu/fuubar-cucumber - The instafailing progress bar formatter