It is possible to call steps from [[Step Definitions]]:

<pre>
# ruby
Given /^The user (.*) exists$/ do |name|
  # ...
end

Given /^I log in as (.*)$/ do |name|
  # ...
end

Given /^(.*) is logged in$/ do |name|
  Given "The user #{name} exists"
  Given "I log in as #{name}"
end
</pre>

This is practical if you have several common steps that you want to perform in several scenarios. This allows you to do this in a Scenario:

<pre>
# feature
Scenario: View last incidents
  Given Linda is logged in # This will in fact invoke 2 step definitions
  When I go to the incident page
</pre>

Instead of having a lot of repetition:

<pre>
# feature
Scenario: View last incidents
  Given The user Linda exists
  And I log in as Linda
  When I go to the incident page
</pre>

h2. Calling with tables and strings

*{color:red}This is only possible in 0.1.99 and higher*

Sometimes you want to call a step that has been designed to take a table as input:
(See [[Using tabular data in features]] for details about tables).

<pre>
# ruby
Given /^an expense report for (.*) with the following posts:$/ do |date, posts_table|
  # The posts_table variable is an instance of Cucumber::Ast::Table
end
</pre>

This can easily be called from a plain text step like this:

<pre>
# feature
Given an expese report for Jan 2009 with the following posts:
  | account | description | amount |
  | INT-100 | Taxi        |    114 |
  | CUC-101 | Peeler      |     22 |
</pre>

But what if you want to call this from a step definition? There are a couple of ways to do this:

<pre>
# ruby
Given /A simple expense report/ do
  Given "an expense report for Jan 2009 with the following posts:", table(%{
    | account | description | amount |
    | INT-100 | Taxi        |    114 |
    | CUC-101 | Peeler      |     22 |
  })
end
</pre>

Or, if you prefer a more programmatic approach:

<pre>
# ruby
Given /A simple expense report/ do
  Given "an expense report for Jan 2009 with the following posts:", Cucumber::Ast::Table.new([
    %w{ account description amount },
    %w{ INT-100 Taxi        114    },
    %w{ CUC-101 Peeler      22     }
  ])
end
</pre>
